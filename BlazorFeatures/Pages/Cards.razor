@page "/cards"
@using Contracts;
@using Entities.Models;
@using Repository;

@inject IRepositoryWrapper _repoContext;

<h3>Cards</h3>

<button @onclick="GetCards"> Get Cards </button>
<br />
<button @onclick ="CreateCards">Create Cards</button>

@if (cards == null)
{
    <!-- Show this if the current user has no data... yet... -->
    <p><em>Loading cards...</em></p>
}

else
{
    <table class="table">
        <thead>
            <tr>
                <td>Card Name</td>
                <td>Arcana</td>
                <td>Suit</td>
            </tr>       
        </thead>
        <tbody>
            @foreach(var card in cards)
            {
                <tr>
                    <td>@card.CardName</td>
                    <td>@card.Arcana</td>
                    <td>@card.Suit</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    private IEnumerable<Card> cards;
    public void GetCards()
    {
        cards = _repoContext.Card.GetAllCards();
        Console.WriteLine("database retrieved cards.");
    }

    public void CreateCards()
    {
        TestDataBuilder dataBuilder = new TestDataBuilder(_repoContext);
        dataBuilder.BuildCardsAndReadingTypes();
    }

  //  protected override async Task OnInitializedAsync()
    //{
      //  cards = await _repoContext.Card.GetCardsTask();
   // }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        cards = _repoContext.Card.GetAllCards();
    }
}
